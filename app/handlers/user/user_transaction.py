import re

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.utils.states_form import StatesUser
from app.bot_settings import NikooShopBot
from app.data_base.requests import MyRequests
from app.handlers.user.user_cmd_start import cmd_start
from app.handlers.user.user_profile import send_profile
from app.keyboards.inline_markup import InlineKeyBoard
from app.services.payment_lava import API_Lava


router = Router(name=__name__)


@router.callback_query(F.data == 'set_promocode')
async def get_promocode(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ üéÅ".
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM "get_promocode" –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.

    :param callback: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery.
    :param state: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ FSMContext.
    """

    await callback.message.edit_caption(
        caption=f'üìå <a href="tg: user?id={callback.from_user.id}"><i>{callback.from_user.full_name}</i></a>, '
                f'–≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å! üéÅ\n\n',
    )

    await state.set_state(state=StatesUser.get_promocode)


@router.message(StatesUser.get_promocode, F.text)
async def check_promocode(message: Message, state: FSMContext) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–Ω –≤–µ—Ä–Ω—ã–π, —Ç–æ –±–æ–Ω—É—Å –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å.
    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.
    :param state: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ FSMContext.
    """

    promo_code: str = message.text
    promo_codes = await MyRequests.get_columns(table='PromoCode', columns_name=['code', 'gift_sum', 'limit'])
    user = await MyRequests.get_line(table='Users', column_name='user_id', value=message.from_user.id)
    promo = next((promo for promo in promo_codes if promo_code == promo[0]), None)

    if promo and promo[2] > 0:
        await MyRequests.update_items(table='PromoCode', column_name='code', value=promo[0],  limit=promo[2] - 1)

        await MyRequests.update_items(
            table='Users',
            column_name='user_id',
            value=message.from_user.id,
            balance=user.balance + promo[1]
        )

        await message.answer(text=f'üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo[1]} ‚ÇΩ!\n\n')

    else:
        await message.answer(text=f'‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n')

    await cmd_start(message=message)

    await state.clear()


@router.callback_query(F.data == 'set_balance')
async def get_sum_balance(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥".
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM "get_sum" –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

    :param callback: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery.
    :param state: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ FSMContext.
    """

    await callback.message.answer(text='üí≥ –ù–∞–ø–∏—à–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å:')

    await state.set_state(state=StatesUser.get_sum)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
@router.message(StatesUser.get_sum, F.text)
async def send_link(message: Message, state: FSMContext) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    –£–¥–∞–ª—è–µ—Ç 2 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å (–ß–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç?).
    –ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM "check_pay".
    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —Å—É–º–º–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –µ—â–µ —Ä–∞–∑.

    :param message: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message.
    :param state: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ FSMContext.
    """

    payment_sum: str = message.text

    await NikooShopBot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message.message_id - 1])

    if re.fullmatch(r'\d+', payment_sum):
        response = await API_Lava.create_invoice(amount=payment_sum)

        payment_link = response[0]
        payment_id = response[1]

        payment_kb = InlineKeyBoard(
            *[
                ('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥', payment_link),
                ('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ', 'check_payment'),
                ('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†', 'main_menu'),
            ],
        )

        await message.answer(
            text='üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: üëáüèª\n\n' + payment_link,
            reply_markup=payment_kb(rows=1),
        )

        await state.update_data(id=payment_id, sum=payment_sum)
        await state.set_state(state=StatesUser.check_pay)

    else:
        await message.answer(
            text="<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ <b>–µ—â–µ —Ä–∞–∑:</b>",
        )

        await state.set_state(state=StatesUser.get_sum)


@router.callback_query(StatesUser.check_pay, F.data == 'check_payment')
async def check_pay(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ".
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã.
    –ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –æ–ø–ª–∞—Ç–µ, –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –æ—á–∏—â–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    –ò–Ω–∞—á–µ, –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    :param callback: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery.
    :param state: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ FSMContext.
    """

    data = await state.get_data()

    payment_status = await API_Lava.status_invoice(data['id'])

    if payment_status:
        await callback.message.delete()

        await callback.message.answer(
            text='‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n'
                 'üí∞ –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å. \n\n'
        )

        user = await MyRequests.get_line(table='Users', column_name='user_id', value=callback.from_user.id)
        await MyRequests.update_items(
            table='Users',
            column_name='user_id',
            value=callback.from_user.id,
            balance=float(user.balance) + float(data.get('sum'))
        )

        await send_profile(callback=callback)

    else:
        await callback.message.answer(text='‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞, —Å–∫–æ—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å!</b>')

        await state.set_state(state=StatesUser.check_pay)

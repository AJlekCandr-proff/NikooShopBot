# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π.
import re

from aiogram import F, Router
from aiogram.types import CallbackQuery, BufferedInputFile, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.views import msg_choice_game, msg_format_product, msg_error_format_product, msg_error_format_text_product
from app.bot_settings import bot
from app.data_base.requests import MyRequests
from .admin_panel import cmd_admin
from app.keyboards.inline_markup import InlineKeyBoard


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞.
router = Router(name=__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM.
class StatesAdmin(StatesGroup):
    """–•—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. """

    choice_game = State()
    choice_action = State()
    select_item = State()
    get_item = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º üõçÔ∏è".
@router.callback_query(F.data == 'edit_catalog')
async def edit_catalog(callback: CallbackQuery, state: FSMContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º üõçÔ∏è".\n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery –∏ FSMContext.\n
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–µ –∫–∞—Ç–∞–ª–æ–≥–∞.\n\n """

    await callback.message.delete()

    categories = await MyRequests.get_columns(table='Category', columns_name=['id', 'title_game'])

    category_kb = InlineKeyBoard(
        *[
             (game[1], f'edit_{game[0]}') for game in categories

         ] + [
             ('–í –ø–∞–Ω–µ–ª—å üè†', 'panel'),
         ],
    )
    await callback.message.answer_photo(
        photo=BufferedInputFile(
            file=open('app/media/Base/catalog.png', 'rb').read(),
            filename='Admin.jpg',
        ),
        caption=msg_choice_game(),
        reply_markup=category_kb(rows=1),
    )

    await state.set_state(state=StatesAdmin.choice_game)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã.
@router.callback_query(StatesAdmin.choice_game)
async def send_catalog_game(callback: CallbackQuery, state: FSMContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–µ –∫–∞—Ç–∞–ª–æ–≥–∞.\n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery –∏ FSMContext.\n
    –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,
    –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM 'choice_action' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n\n """

    await callback.message.delete()

    game_id = callback.data.split('_')[1]
    game = await MyRequests.get_line(table='Category', column_name='id', value=game_id)
    products = await MyRequests.get_columns(table=game.title_game, columns_name=['id', 'Count', 'Product', 'Price'])

    await state.update_data(game=game.title_game, id=game_id)

    products_kb = InlineKeyBoard(
        *[
             (
                 f'{product[1]} {product[2].replace("–ì–µ–º—ã", "–ì–µ–º–æ–≤") if "–ì–µ–º—ã" in product[2] else product[2]} | {product[3]} ‚ÇΩ',
                 f'{product[0]}'
             )
             for product in products
        ] + [
            ('‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç', 'add_item'),
            ('üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç', 'delete_item'),
            ('–í –ø–∞–Ω–µ–ª—å üè†', 'panel'),
        ],
    )

    await callback.message.answer_photo(
        photo=BufferedInputFile(
            file=open('app/media/Base/catalog.png', 'rb').read(),
            filename='Admin.jpg',
        ),
        caption=f'üéÆ –í–æ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä—ã {game.title_game} üëáüèª',
        reply_markup=products_kb(rows=1),
    )

    await state.set_state(state=StatesAdmin.choice_action)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç".
@router.callback_query(StatesAdmin.choice_action, F.data == 'delete_item')
async def selected_item(callback: CallbackQuery, state: FSMContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç".\n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery –∏ FSMContext.\n
    –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n """

    data = await state.get_data()
    game = data.get(__key='game')
    products = await MyRequests.get_columns(table=game, *['id', 'Count', 'Product', 'Price'])

    products_kb = InlineKeyBoard(
        *[
            (
                f'{product[1]} {product[2].replace("–ì–µ–º—ã", "–ì–µ–º–æ–≤") if "–ì–µ–º—ã" in product[2] else product[2]} | {product[3]} ‚ÇΩ',
                f'{product[0]}'
            )
            for product in products
        ]
    )

    await callback.message.edit_caption(
        caption=f'üóë –í—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è üëáüèª',
        reply_markup=products_kb(rows=1),
    )

    await state.set_state(state=StatesAdmin.select_item)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã.
@router.callback_query(StatesAdmin.select_item)
async def delete_item(callback: CallbackQuery, state: FSMContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery –∏ FSMContext.\n
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞ –≤—ã–±–æ—Ä –∏–≥—Ä—ã. """

    data = await state.get_data()
    game = data.get(__key='game')
    product_id = int(callback.data)

    await MyRequests.delete_items(table=game, column_name='id', value=product_id)

    await callback.message.answer(text='‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üóë')

    await send_catalog_game(callback=callback, state=state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç".
@router.callback_query(F.data == 'add_item', StatesAdmin.choice_action)
async def get_info_item(callback: CallbackQuery, state: FSMContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç".\n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery –∏ FSMContext.\n
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM "get_item" –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n """

    await callback.message.delete()

    await callback.message.answer(text=msg_format_product())

    await state.set_state(state=StatesAdmin.get_item)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
@router.message(StatesAdmin.get_item, F.photo)
async def add_item_into_db(message: Message, state: FSMContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ.\n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ CallbackQuery –∏ FSMContext.\n
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞,
    –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–Ω–æ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å–Ω–æ–≤–∞.\n\n """

    if message.caption:
        data = await state.get_data()
        text = message.caption

        if re.fullmatch(r'^[\w\s]+\s\d+\s\d+$', text):
            parts: list[str] = text.rsplit(' ', 2)
            title: str = parts[0]
            count = int(parts[1])
            price = float(parts[2])
            game = data['game']

            await MyRequests.add_items(
                table=game,
                Product=title,
                Count=count,
                Category=data.get('id'),
                Price=price
            )

            product = await MyRequests.get_line(table=game, column_name='Product', value=title)

            await bot.download(message.photo[-1].file_id, f'app/media/{data.get("game")}/Product_{product.id}.png')

            await message.answer(text='‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω üìù')

            await cmd_admin(message=message)

            await state.clear()

        else:
            await message.answer(text=msg_error_format_text_product())

    else:
        await message.answer(text=msg_error_format_product())

        await state.set_state(state=StatesAdmin.get_item)
